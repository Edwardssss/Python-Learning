"""
类是对象的类型，用于面向对象的开发
先定义类，再去由类来创建对象，最后让对象来管理程序

也就是先抽象类型，再运用到实例上面去，然后再让实例化的对象去操作

类是相同类似对象的统称，相当于一类事物的模板
"""


# 类：可以看作应该属性和方法的集合
# 对象：对象可以看成是类的实例
# 方法：定义在类当中的函数
# 实例化：创建一个类的具体实例，也就是一个类的具体对象
# 实例变量：定义在方法当中的变量
# 类变量：类变量定义在类当中，在对象当中可以公用
# 方法重写：子类对父类方法的改写（也是覆盖）
# 继承：一个新的类从一个已有的类当中派生出来，可以继承父类的字段和方法

# 下面创建一个类，并且对其实例化
class Remake:
    """
    初始化方法__init__(self)
    类在实例化的时候会自动调用该方法
    """

    def __init__(self):
        print("摆烂")

    """
    函数的第一个参数self指的是实例本身
    必须作为第一个参数    
    """

    def result(self):
        print("满寄")
        x = 1
        return "老师，菜菜，捞捞~", "呜呜"  # 返回值可以为多个值，类型会自动转化成元组

    score = 59  # 创建类变量

    def test(self):
        return x  # 错误调用其他方法内定义的变量

    def surf(self):
        print("你通过surf函数访问了__private()方法和__number变量")
        self.__private()
        print(self.__number)

    def __private(self):
        print("你没办法直接访问私有方法")
    __number = 12  # 标识符前面__表示该方法/变量私有，不可直接访问




exam = Remake()  # 类的实例化，init初始化
print(exam.result())  # 调用类当中的方法
print(exam.score)  # 调用类变量
print(exam.surf())  # 可以通过类当中的方法进行间接访问,由于未return所以返回值应该是None
# print(exam.test())  # 错误：定义在方法当中的实例变量只能作用于方法内
# print(exam.__private)  # 错误：私有方法不可以直接访问
# print(exam.__number)  # 错误：私有变量不可以直接访问
